plugins {
	id 'java-library'
	id 'maven-publish'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id "com.google.cloud.artifactregistry.gradle-plugin" version "2.2.0"
	id 'jacoco'
	id 'pmd'
}
// Ensure following task run before each test ...
check.dependsOn jacocoTestCoverageVerification, jacocoTestReport, pmdMain, pmdTest

group = 'com.abha'
version = '0.0.1'

java {
	sourceCompatibility = 17
	targetCompatibility = 17
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.30'  // Specify the Lombok version
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Publishing configuration
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
		mavenLocal()
	}
}

jacocoTestReport {
	dependsOn(test)
	reports {
		//xml.required.set(true)
		//csv.required.set(true)
		html.required.set(true) // Right now html file will get generated in /build/reports folder, uncomment
		// above two lines to generate xml and csv files.
	}

	// Define code coverage exclusions
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					// Exclude a package and its sub-packages
					'com/abha/sharedlibrary/**/request/**',
					'com/abha/sharedlibrary/**/response/**'
			])
		})
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'INSTRUCTION'
				minimum = 0.95
			}
			limit {
				counter = 'LINE'
				minimum = 0.95
			}
			limit {
				counter = 'BRANCH'
				minimum = 0.95
			}
			limit {
				counter = 'METHOD'
				minimum = 0.95
			}
			limit {
				counter = 'CLASS'
				minimum = 0.95
			}
			limit {
				counter = 'COMPLEXITY'
				minimum = 0.95
			}
		}
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'com/abha/sharedlibrary/**/request/**',
					'com/abha/sharedlibrary/**/response/**'
			])
		})
	}
}

test {
	useJUnitPlatform()
}